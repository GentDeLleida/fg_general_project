/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.game.Actions', null, global);
goog.exportSymbol('proto.game.Player', null, global);
goog.exportSymbol('proto.game.StartRequest', null, global);
goog.exportSymbol('proto.game.StartResponse', null, global);
goog.exportSymbol('proto.game.Status', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.StartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.StartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.StartRequest.displayName = 'proto.game.StartRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.StartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.game.StartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.StartRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.StartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: msg.getUsername(),
    character: msg.getCharacter()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.game.StartRequest} The clone.
 */
proto.game.StartRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.game.StartRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.game.StartRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.game.StartRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 character = 2;
 * @return {number}
 */
proto.game.StartRequest.prototype.getCharacter = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.game.StartRequest.prototype.setCharacter = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.StartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.StartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.StartResponse.displayName = 'proto.game.StartResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.StartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.game.StartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.StartResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.StartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    initStatus: (f = msg.getInitStatus()) && proto.game.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.game.StartResponse} The clone.
 */
proto.game.StartResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.game.StartResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Status init_status = 1;
 * @return {proto.game.Status}
 */
proto.game.StartResponse.prototype.getInitStatus = function() {
  return /** @type{proto.game.Status} */ (
    jspb.Message.getWrapperField(this, proto.game.Status, 1));
};


/** @param {proto.game.Status|undefined} value  */
proto.game.StartResponse.prototype.setInitStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.game.StartResponse.prototype.clearInitStatus = function() {
  this.setInitStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.game.StartResponse.prototype.hasInitStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.Actions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.Actions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.Actions.displayName = 'proto.game.Actions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.Actions.prototype.toObject = function(opt_includeInstance) {
  return proto.game.Actions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.Actions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.Actions.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: msg.getAction()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.game.Actions} The clone.
 */
proto.game.Actions.prototype.cloneMessage = function() {
  return /** @type {!proto.game.Actions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string action = 1;
 * @return {string}
 */
proto.game.Actions.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.game.Actions.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.Player.displayName = 'proto.game.Player';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.game.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.Player} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    sprite: msg.getSprite(),
    posx: msg.getPosx(),
    posy: msg.getPosy(),
    health: msg.getHealth(),
    character: msg.getCharacter(),
    username: msg.getUsername()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.game.Player} The clone.
 */
proto.game.Player.prototype.cloneMessage = function() {
  return /** @type {!proto.game.Player} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 sprite = 1;
 * @return {number}
 */
proto.game.Player.prototype.getSprite = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.game.Player.prototype.setSprite = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 posX = 2;
 * @return {number}
 */
proto.game.Player.prototype.getPosx = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.game.Player.prototype.setPosx = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 posY = 3;
 * @return {number}
 */
proto.game.Player.prototype.getPosy = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.game.Player.prototype.setPosy = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 health = 4;
 * @return {number}
 */
proto.game.Player.prototype.getHealth = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.game.Player.prototype.setHealth = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 character = 5;
 * @return {number}
 */
proto.game.Player.prototype.getCharacter = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.game.Player.prototype.setCharacter = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string username = 6;
 * @return {string}
 */
proto.game.Player.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.game.Player.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.game.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.game.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.game.Status.displayName = 'proto.game.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.game.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.game.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.game.Status} msg The msg instance to transform.
 * @return {!Object}
 */
proto.game.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    player1: (f = msg.getPlayer1()) && proto.game.Player.toObject(includeInstance, f),
    player2: (f = msg.getPlayer2()) && proto.game.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.game.Status} The clone.
 */
proto.game.Status.prototype.cloneMessage = function() {
  return /** @type {!proto.game.Status} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Player player1 = 1;
 * @return {proto.game.Player}
 */
proto.game.Status.prototype.getPlayer1 = function() {
  return /** @type{proto.game.Player} */ (
    jspb.Message.getWrapperField(this, proto.game.Player, 1));
};


/** @param {proto.game.Player|undefined} value  */
proto.game.Status.prototype.setPlayer1 = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.game.Status.prototype.clearPlayer1 = function() {
  this.setPlayer1(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.game.Status.prototype.hasPlayer1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Player player2 = 2;
 * @return {proto.game.Player}
 */
proto.game.Status.prototype.getPlayer2 = function() {
  return /** @type{proto.game.Player} */ (
    jspb.Message.getWrapperField(this, proto.game.Player, 2));
};


/** @param {proto.game.Player|undefined} value  */
proto.game.Status.prototype.setPlayer2 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.game.Status.prototype.clearPlayer2 = function() {
  this.setPlayer2(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.game.Status.prototype.hasPlayer2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.game);
